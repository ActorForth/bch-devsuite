#!/usr/bin/env bash
set -u

abort() {
    printf "%s" "$@"
    exit 1
}

lookingfor() {
    printf "Looking for %s\t... " "$@"
}

greentext() {
    for var in "$@"
    do
        printf "\x1B[32m%b\e[0m" "$@"
    done
    printf "\n"
}

redtext() {
    for var in "$@"
    do
        printf "\x1B[31m%b\e[0m " "$var"
    done
    printf "\n"
}

successOrFail() {
    if [[ $1 == 0 ]]; then
        greentext $2
    else
        redtext $3
        echo $4
        exit 1
    fi
}

if [[ -z "${BASH_VERSION:-}" ]]; then
    abort "Bash is required to interpret this script."
fi

# First check OS.
OS="$(uname)"
if [[ "$OS" == "Linux" ]]; then
    BCH_TOOLKIT_ON_LINUX=1
elif [[ "$OS" != "Darwin" ]]; then
    abort "bch-toolkit is only supported on macOS and Linux."
fi

# Ensure working directory is clean before setup
if [[ -f ".lock" || -f "config.json" ]]; then
	printf "It appears you've already run this setup script before.\n"
	printf "Please run the ./clean script before trying to setup again.\n"
	abort
fi

# This default address makes it easy to generate funds to
# an address you have access to.
BTK_GENERATE_ADDRESS=bchreg:qzerfrqkvsclmrlx3hzl0j2ac2eh0k88wqa0efygtm
BTK_WIF=cUDjy47QLpAUyv1beivDPoYCHjCRVqwRMwCuSnkdF4teVFBDD1ip

BTK_SLEEP_TIME=${sleep:-6}
BTK_BLOCKS=${blocks:-200}
BTK_ENV=$(uname)
BTK_UNLIMITED=0 # Default incl ElectrsCash
BTK_CASHNODE=0 # Default incl Fulcrum
BTK_BCHREST=0
BTK_BCHAPI=0 # Default incl NGINX
BTK_SLP=0 # Default incl SLPDB, slpserve

BTK_DOCKER_NETWORK=${BTK_DOCKER_NETWORK:-"bch-toolkit-network"}

# Process user arguments, or display usage message
if [[ ! -z "${1:-}" ]]; then
    for var in "$@"
    do
        if [[ $var == "bcnh" ]]; then
            abort "No command 'bcnh'. Did you mean 'bchn' ?"
        fi
		[[ $var == "bu" ]] && BTK_UNLIMITED=1
        [[ $var == "bchn" ]] && BTK_CASHNODE=1
		[[ $var == "bchrest" ]] && BTK_BCHREST=1
        [[ $var == "bchapi" ]] && BTK_BCHAPI=1
		[[ $var == "slp" ]] && BTK_SLP=1
		if [[ $var == "wallet" ]]; then
			abort "Deprecated: Electron Cash SLP wallet no longer part of bch-toolkit"
		fi
		if [[ $var == "all" ]]; then
			BTK_CASHNODE=1 # Default to BitcoinCashNode
			BTK_BCHREST=1
            BTK_BCHAPI=1
			BTK_SLP=1
		fi
    done
else
    TAB="\t"
    normal() {
        printf "$1\n"
    }
    option() {
        if [[ ${#1} -lt 3 ]]; then
            T="\t\t"
        else
            T="\t"
        fi
        printf "    $1 $T- $2\n"
    }
    normal "usage: setup [options]"
    normal "options:"
    option "dev" "Use the latest cutting edge version of each component"
    option "bu" "Bitcoin Unlimited node"
    option "bchn" "Bitcoin Cash Node"
    option "bchrest" "A rest.bitcoin.com-compatible REST service"
    option "bchapi" "Bch-API REST service from Fullstack.cash"
	option "slp" "SLP services (SLPDB, slpserve)"
    option "all" "all of the above"
    exit 0
fi

### Catch exceptions
# User cannot have more than one node
if [[ $BTK_UNLIMITED == 1 && $BTK_CASHNODE == 1 ]]; then
    echo "bch-toolkit cannot run both Bitcoin Unlimited and BitcoinCashNode at the same time."
    echo "Please select only one."
    abort
fi

# User must have at least one node
if [[ $BTK_UNLIMITED == 0 && $BTK_CASHNODE == 0 ]]; then
    echo "Please select at least 1 node (bu or bchn) to set up."
    abort
fi
### End exception catching

# Check that Python3 is installed
lookingfor "Python 3"
[[ -x "$(command -v python3)" ]]
successOrFail $? 'found' 'not found' 'Python 3 not found. Please install Python 3.'

# Check that openssl is installed and available
if [[ $BTK_BCHAPI == 1 ]]; then
	lookingfor "OpenSSL"
	[[ -x "$(command -v openssl)" ]]
    successOrFail $? 'found' 'not found' 'OpenSSL not found. Please install OpenSSL.'
fi

# Check that Docker and docker-compose are installed
lookingfor "Docker"
[[ -x "$(command -v docker)" ]];
successOrFail $? 'found' 'not found' 'Docker not found. Please install docker.'
# Note: The following line may seem useless,
# however it causes the scirpt to error if 
# A) Docker is not currently running, or
# B) permissions are not set correctly on Linux
printf "Checking that Docker is running\t... "
BTK_DOCKER_STATUS=`docker ps`
successOrFail $? 'done' 'error' ''

lookingfor "docker-compose"
[[ -x "$(command -v docker-compose)" ]]
successOrFail $? 'found' 'not found' 'Docker-compose not found. Please install docker-compose.'

# Create Docker network if it doesn't exist
if [[ -z $(docker network ls --filter name=^${BTK_DOCKER_NETWORK}$ --format="{{ .Name }}") ]]; then
	eval "docker network create ${BTK_DOCKER_NETWORK} &> /dev/null"
fi

# Create new SSL certificate/key pair to be used on nginx server
if [[ $BTK_BCHAPI == 1 ]]; then
	if [[ -d "./configs/cert" ]]; then
		if [[ -f "./configs/cert/cert.key" && -f "./configs/cert/cert.crt" ]]; then
			printf "OpenSSL certificates already exist.\n"
		else
			printf "Removing previous certs directory\t... "
			rm -rf ./configs/cert
            successOrFail $? 'done' 'error' 'Could not delete certificate directory.'
		fi
	fi

	if [[ ! -d "./configs/cert" ]]; then
		printf "Creating SSL certificate directory\t... "
		mkdir ./configs/cert
        successOrFail $? 'done' 'error' 'Could not create certificate directory.'
        printf "Creating SSL certificate\t... "
		eval "openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
			-keyout ./configs/cert/cert.key \
			-out ./configs/cert/cert.crt \
			-subj \"/C=no/ST=no/L=no/O=no/OU=no/CN=no/emailAddress=no\"" &> /dev/null
        successOrFail $? 'done' 'error' 'Could not create SSL certificate.'
	fi
fi

# Set up the config file based on user input
printf "Creating config files ... "
python3 - << EOF
import json, os

PREFIX = "./compose_files/"
config = {
    "node": "",
    "indexer": "",
    "rest": [],
    "slp": [],
    "network": ""
}

if ${BTK_UNLIMITED}:
    config["node"] = "bitcoinunlimited"

if ${BTK_CASHNODE}:
    config["node"] = "bitcoincashnode"
    config["indexer"] = "fulcrum"

if ${BTK_BCHREST}:
    config["rest"] += ["opensight"]
    config["rest"] += ["bchrest"]

if ${BTK_BCHAPI}:
    config["rest"] += ["nginx"]
    config["rest"] += ["bchapi"]

if ${BTK_SLP}:
    config["slp"] += ["mongodb"]
    config["slp"] += ["slpdb"]
    config["slp"] += ["slpserve"]

config["network"] = "network"

def iterdict(d):
    s = "DOCKER_ARGS=\""
    for k,v in d.items():        
        if isinstance(v, dict):
            iterdict(v)
        elif isinstance(v, list):
            for item in v:
                if item:
                    s += "-f {}{}.yml ".format(PREFIX,item)
        else:
            if v:            
                s += "-f {}{}.yml ".format(PREFIX, v)
    return "{}\"\n".format(s.strip())

docker_compose_args = iterdict(config)

with open('config.json', 'w') as config_file:
    json.dump(config, config_file)

with open('.lock', 'w') as lock_file:
    lock_file.write(docker_compose_args)
EOF
successOrFail $? 'done' 'error' 'Could not create config files.'

# Pull the Docker images
source .lock
eval "docker-compose -p bch-toolkit $DOCKER_ARGS pull"
#TODO: Find a way to only run this if the images
# aren't already pulled.

# Initailze regtest node
eval "docker-compose $DOCKER_ARGS up -d bch-node"
sleep $BTK_SLEEP_TIME

# Generate N blocks
printf "Generating $BTK_BLOCKS initial blocks for regtest ... "
    eval "docker-compose $DOCKER_ARGS exec -T bch-node bitcoin-cli -conf=/bitcoin.conf generate $BTK_BLOCKS > /dev/null"
successOrFail $? 'done' 'error' 'Could not create blocks.'

printf "Stopping local node ... "
    sleep $BTK_SLEEP_TIME
    eval "docker-compose $DOCKER_ARGS exec -T bch-node bitcoin-cli -conf=/bitcoin.conf stop > /dev/null"
successOrFail $? 'done' 'error' 'Could not stop local node.'

printf "\nFinished. Please use './services start' to run your new regtest node."

# End of file
