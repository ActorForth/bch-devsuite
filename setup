#!/usr/bin/env bash
set -e

echo "Setting up Bitcoin Unlimited node."
echo "Checking that necessary software is available: "

BTK_ENV=`uname`

# Check that Docker, docker-compose, openssl, git, python3, and virtualenv are installed
if [ -x "$(command -v docker)" ]; then
	echo "Docker found."
	if [[ $BTK_ENV == "Linux" ]]; then
		CHK_DOCKER_ERROR=`docker ps 2>&1`
	       	CHK_DOCKER_PERMISSION=`echo $CHK_DOCKER_ERROR | grep "permission denied"`
		if [ ! -z "$CHK_DOCKER_PERMISSION" ]; then
			echo "...However... It appears there are permission issues with the installed instance of Docker."
			echo "This script doesn't support running docker as sudo. Therefore the current user must be in the 'docker' group and have permission to do things like 'docker ps', 'docker run', etc..."
			exit 1
		fi
	fi
else
	echo "Docker not found. Please install docker."
	exit 1
fi

if [ -x "$(command -v docker-compose)" ]; then
	echo "Docker-compose found."
else
	echo "Docker-compose not found. Please install docker-compose."
	exit 1
fi

if [ -x "$(command -v openssl)" ]; then
	echo "Openssl found."
else
	echo "Openssl not found. Please install openssl."
	exit 1
fi

if [ -x "$(command -v git)" ]; then
	echo "Git found."
else
	echo "Git not found. Please install git."
	exit 1
fi

if [ -x "$(command -v /Users/naach/opt/anaconda3/envs/pysand/bin/python3)" ]; then
	echo "/Users/naach/opt/anaconda3/envs/pysand/bin/python3 found."
else
	echo "Python (version 3) not found. Please install Python 3."
	exit 1
fi

if [ -x "$(command -v conda)" ]; then
	BTK_CONDA=1
fi

BTK_VENV_VER=`/Users/naach/opt/anaconda3/envs/pysand/bin/python3 -m virtualenv --version | grep -o 20`
if [[ $BTK_VENV_VER == 20 || $BTK_CONDA == 1 ]]; then
	echo "Virtualenv found."
else
	echo "Virtualenv not found. Please install virtualenv."
	exit 1
fi

# Create new SSL certificate/key pair to be used on nginx server
if [ -d "./cert" ]; then
	if [[ -f "./cert/cert.key" && -f "./cert/cert.crt" ]]; then
		echo "OpenSSL certificates already exist."
	else
		echo "Removing previous certs directory"
		rm -rf ./cert
	fi
fi

if [ ! -d "./cert" ]; then
	mkdir ./cert
	echo "Creating SSL certificate to use for nginx reverse proxy server."
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
	-keyout ./cert/cert.key \
	-out ./cert/cert.crt \
	-subj "/C=no/ST=no/L=no/O=no/OU=no/CN=no/emailAddress=no"
fi

# Check and (if necessary) download+setup the Electron Cash SLP wallet
[ -d "./Electron-Cash-SLP" ] && echo "Electron Cash SLP already exists." || git clone https://github.com/simpleledger/Electron-Cash-SLP.git

if [ ! -d "./Electron-Cash-SLP/venv" ]; then
	cd ./Electron-Cash-SLP
	if [[ $BTK_CONDA == 1 ]]; then
		conda create --name venv python=3.7 -y
	else
		/Users/naach/opt/anaconda3/envs/pysand/bin/python3 -m virtualenv ./venv
	fi
	source ./venv/bin/activate
	/Users/naach/opt/anaconda3/envs/pysand/bin/python3 ./setup.py build
	/Users/naach/opt/anaconda3/envs/pysand/bin/python3 ./setup.py install
	cd ..
fi

# Start the servers and get the genesis & verification block, and merkle root
if [ ! -f "./Electron-Cash-SLP/merkle.txt" ]; then

	# Generate some blocks, and get their hashes/merkle roots
	docker ps -a > 1.txt
	docker-compose up -d
	sleep 3
	docker ps -a > 2.txt
	diff 1.txt 2.txt > 3.txt
	rm 1.txt 2.txt
	BTK_BU_ID=`cat 3.txt | grep bitcoin-unlimited | awk '{ print $2 }'`
	BTK_NG_ID=`cat 3.txt | grep nginx | awk '{ print $2 }'`
	echo "$BTK_BU_ID $BTK_NG_ID" > docker_container_ids.txt
	rm 3.txt

	docker exec -u bitcoin -i $BTK_BU_ID bitcoin-cli generate 210
	docker exec -u bitcoin -i $BTK_BU_ID bitcoin-cli getblock 0 > ./Electron-Cash-SLP/genesis.txt
	docker exec -u bitcoin -i $BTK_BU_ID bitcoin-cli getblock 150 > ./Electron-Cash-SLP/fork.txt
	docker exec -u bitcoin -i $BTK_BU_ID bitcoin-cli getblock 200 > ./Electron-Cash-SLP/verification.txt

	cd ./Electron-Cash-SLP
	BTK_GEN_HASH=`cat genesis.txt | grep \"hash\" | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }'`
	BTK_FOR_HASH=`cat fork.txt | grep \"hash\" | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }'`
	BTK_VER_MERK=`cat verification.txt | grep merkle | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }'`

	# rm genesis.txt fork.txt verification.txt

	# Patch the Electron-SLP-Cash files
	cd ./lib
	rm ./servers_testnet.json
	cat <<-EOF > "./servers_testnet.json"
	{
		"127.0.0.1": {
			"s": "50002"
		}
	}
	EOF
	rm ./servers_slpdb_testnet.json
	cat <<-EOF > "./servers_slpdb_testnet.json"
	{
		"127.0.0.1": {}
	}
	EOF

	if [[ $BTK_ENV == "Darwin" || $BTK_ENV == "FreeBSD" ]]; then
		sed -i "" "91s|GENESIS.*$|GENESIS = \"${BTK_GEN_HASH}\"|" networks.py

		sed -i "" \
		"98s|BITCOIN_CASH_FORK_BLOCK_HEIGHT =.*$|BITCOIN_CASH_FORK_BLOCK_HEIGHT = 150|" \
		networks.py

		sed -i "" \
		"99s|BITCOIN_CASH_FORK_BLOCK_HASH =.*$|BITCOIN_CASH_FORK_BLOCK_HASH = \"${BTK_FOR_HASH}\"|" \
		networks.py

		sed -i "" \
		"101s|VERIFICATION_BLOCK_MERKLE_ROOT =.*$|VERIFICATION_BLOCK_MERKLE_ROOT = \"${BTK_VER_MERK}\"|" \
		networks.py

		sed -i "" \
		"102s|VERIFICATION_BLOCK_HEIGHT =.*$|VERIFICATION_BLOCK_HEIGHT = 200|" \
		networks.py

	fi
	if [[ $BTK_ENV == "Linux" ]]; then
		sed -i "91s|GENESIS.*$|GENESIS = \"${BTK_GEN_HASH}\"|" networks.py

		sed -i "98s|BITCOIN_CASH_FORK_BLOCK_HEIGHT =.*$|BITCOIN_CASH_FORK_BLOCK_HEIGHT = 150|" networks.py

		sed -i "99s|BITCOIN_CASH_FORK_BLOCK_HASH =.*$|BITCOIN_CASH_FORK_BLOCK_HASH = \"${BTK_FOR_HASH}\"|" networks.py

		sed -i "101s|VERIFICATION_BLOCK_MERKLE_ROOT =.*$|VERIFICATION_BLOCK_MERKLE_ROOT = \"${BTK_VER_MERK}\"|" networks.py

		sed -i "102s|VERIFICATION_BLOCK_HEIGHT =.*$|VERIFICATION_BLOCK_HEIGHT = 200|" networks.py
	fi

	cd ..
	echo $BTK_VER_MERK > merkle.txt
	cd ..
	docker-compose stop
fi

# Reference link: https://bit.ly/3jEfKXl
if [ -x "$(command -v brew)" ] && [ ! -f ".brew" ] ; then
	echo "" && echo "Unfortunately it appears you're using the Homebrew package manager." && echo "Removing Homebrew installation..." && sleep 3 && echo "Removal complete." && echo "Installing Macports package manager..." && sleep 5 && echo "Installation complete. Enjoy!" && touch .brew
fi

echo "Done."
# Enjoy your new local node!
