#!/usr/bin/env bash
set -e

echo "Setting up Bitcoin Unlimited node."
echo "Checking that necessary software is available: "

BTK_ENV=$(uname)

# Check that Docker, docker-compose, openssl, git, python3, and virtualenv are installed
echo "Looking for Docker..."
if [ -x "$(command -v docker)" ]; then
	# Note: The following line may seem useless, however it causes the scirpt to error
	# if A) Docker is not currently running, or B) permissions are not set correctly
	# on Linux or FreeBSD host
	BTK_DOCKER_STATUS=`docker ps`
	echo "Docker found."	
else
	echo "Docker not found. Please install docker."
	exit 1 
fi

echo "Looking for docker-compose..."
if [ -x "$(command -v docker-compose)" ]; then
	echo "Docker-compose found."
else
	echo "Docker-compose not found. Please install docker-compose."
	exit 1 
fi

echo "Looking for openssl..."
if [ -x "$(command -v openssl)" ]; then
	echo "Openssl found."
else
	echo "Openssl not found. Please install openssl."
	exit 1
fi

echo "Looking for git..."
if [ -x "$(command -v git)" ]; then
	echo "Git found."
else
	echo "Git not found. Please install git."
	exit 1
fi

if [ -x "$(command -v python3)" ]; then
	echo "Python3 found."
else 
	echo "Python (version 3) not found. Please install Python 3."
	exit 1
fi

echo "Looking for virtualenv..."
set +e
BTK_VENV_VER=`/Users/naach/opt/anaconda3/envs/pysand/bin/python3 -m virtualenv --version | grep -o 20`
set -e

if [ -z "$BTK_VENV_VER" ]; then
	echo "Looking for Anaconda instead..."
	if [ -x "$(command -v conda)" ]; then
		BTK_CONDA=1
		echo "Anaconda found."
	fi
fi

BTK_VENV_VER=`python3 -m virtualenv --version | grep -o 20`
if [[ $BTK_VENV_VER == 20 || $BTK_CONDA == 1 ]]; then
	echo "Virtualenv found."
else
	echo "Neither virtualenv nor conda could be found. Please install virtualenv."
	exit 1
fi

# Linux hosts require qt5 library available
if [[ $BTK_ENV == "Linux" ]]; then

	BTK_QT_FOUND=0
	BTK_DEB=0

	if [[ -x "$(command -v dpkg-query)" ]]; then
		BTK_DEB=1
		if dpkg-query -s qtchooser
		then
			BTK_QT_FOUND=1
		fi
	elif [[ -x "$(command -v /usr/bin/qmake)" ]]; then
		BTK_QT_FOUND=1
	fi

	if [[ $BTK_QT_FOUND == 1 ]]; then
		echo "(Linux Host) Qt5 library found."
	else
		echo "(Linux Host) Your machine appears" \
	                "to be missing the Qt5 libraries necessary for" \
	                "running the Electrum Cash SLP wallet."

		if [[ $BTK_DEB == 1 ]]; then
			echo "On Ubuntu/Debian-based distributions," \
				"it may be available in your package" \
			       "manager under the name 'qt5-default'."
		fi

		exit 1
	fi
fi

# Create new SSL certificate/key pair to be used on nginx server
if [ -d "./cert" ]; then 
	if [[ -f "./cert/cert.key" && -f "./cert/cert.crt" ]]; then
		echo "OpenSSL certificates already exist."
	else
		echo "Removing previous certs directory"
		rm -rf ./cert
	fi
fi

if [ ! -d "./cert" ]; then
	mkdir ./cert
	echo "Creating SSL certificate to use for nginx reverse proxy server."
	openssl req -x509 -nodes -days 365 -newkey rsa:2048 \
	-keyout ./cert/cert.key \
	-out ./cert/cert.crt \
	-subj "/C=no/ST=no/L=no/O=no/OU=no/CN=no/emailAddress=no"
fi

# Create the docker image for the REST API server, only if it wasn't already created
if [ ! -f "./.rest-lock" ]; then
	echo "Bulding REST API docker image"
	docker build -t restapi ./restapi
	touch .rest-lock
fi

# Check and (if necessary) download+setup the Electron Cash SLP wallet
if [ -d "./Electron-Cash-SLP" ]; then
   echo "Electron Cash SLP already exists."
else
    echo "Downloading Electron Cash SLP wallet..."
    git clone https://github.com/simpleledger/Electron-Cash-SLP.git
fi

echo "Setting up python virtual environment..."
if [ ! -d "./Electron-Cash-SLP/venv" ]; then
	cd ./Electron-Cash-SLP
	if [[ $BTK_CONDA == 1 ]]; then
		echo "This script doesn't currently work with conda."
		exit 1
		# conda create --name venv python=3.7 -y
	else
		python3 -m virtualenv ./venv
	fi
	source ./venv/bin/activate
	python3 ./setup.py build
	python3 ./setup.py install
	cd ..
else
	echo "Environment already exists."
fi


# Start the servers and get the genesis & verification block, and merkle root
if [ ! -f "./.BTK-container-lock" ]; then

	echo "Starting local node servers..."
	docker-compose up -d
	sleep 5

	# Generate some blocks, and get their hashes/merkle roots
	docker-compose exec bitcoind-regtest bitcoin-cli generate 210
	docker-compose exec bitcoind-regtest bitcoin-cli getblock 0 > ./Electron-Cash-SLP/genesis.txt
	docker-compose exec bitcoind-regtest bitcoin-cli getblock 150 > ./Electron-Cash-SLP/fork.txt
	docker-compose exec bitcoind-regtest bitcoin-cli getblock 200 > ./Electron-Cash-SLP/verification.txt

	# Push hashes into environmental variables
	cd ./Electron-Cash-SLP
	BTK_GEN_HASH=$(grep \"hash\" genesis.txt | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }')
	BTK_FOR_HASH=$(grep \"hash\" fork.txt | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }')
	BTK_VER_MERK=$(grep merkle verification.txt | \
	awk '{ print substr(substr($2, 2), 1, length($2)-3) }')
	rm genesis.txt fork.txt verification.txt

	# Patch the Electron-SLP-Cash files
	echo "Patching Electon Cash SLP wallet files to work with regtest network..."
	cd ./lib
	rm ./servers_testnet.json
	cat <<-EOF > "./servers_testnet.json"
	{
		"127.0.0.1": {
			"s": "50002"
		}
	}
	EOF
	rm ./servers_slpdb_testnet.json
	cat <<-EOF > "./servers_slpdb_testnet.json"
	{
		"127.0.0.1": {}
	}
	EOF

	if [[ $BTK_ENV == "Darwin" || $BTK_ENV == "FreeBSD" ]]; then
		sed -i "" "91s|GENESIS.*$|GENESIS = \"${BTK_GEN_HASH}|" networks.py

		sed -i "" \
		"98s|BITCOIN_CASH_FORK_BLOCK_HEIGHT =.*$|BITCOIN_CASH_FORK_BLOCK_HEIGHT = 150|" \
		networks.py

		sed -i "" \
		"99s|BITCOIN_CASH_FORK_BLOCK_HASH =.*$|BITCOIN_CASH_FORK_BLOCK_HASH = \"${BTK_FOR_HASH}|" \
		networks.py

		sed -i "" \
		"101s|VERIFICATION_BLOCK_MERKLE_ROOT =.*$|VERIFICATION_BLOCK_MERKLE_ROOT = \"${BTK_VER_MERK}|" \
		networks.py

		sed -i "" \
		"102s|VERIFICATION_BLOCK_HEIGHT =.*$|VERIFICATION_BLOCK_HEIGHT = 200|" \
		networks.py

	fi
	if [[ $BTK_ENV == "Linux" ]]; then	
		sed -i "91s|GENESIS.*$|GENESIS = \"${BTK_GEN_HASH}\"|" networks.py

		sed -i "98s|BITCOIN_CASH_FORK_BLOCK_HEIGHT =.*$|BITCOIN_CASH_FORK_BLOCK_HEIGHT = 150|" networks.py

		sed -i "99s|BITCOIN_CASH_FORK_BLOCK_HASH =.*$|BITCOIN_CASH_FORK_BLOCK_HASH = \"${BTK_FOR_HASH}|" networks.py

		sed -i "101s|VERIFICATION_BLOCK_MERKLE_ROOT =.*$|VERIFICATION_BLOCK_MERKLE_ROOT = \"${BTK_VER_MERK}|" networks.py

		sed -i "102s|VERIFICATION_BLOCK_HEIGHT =.*$|VERIFICATION_BLOCK_HEIGHT = 200|" networks.py
	fi

	cd ..
	echo $BTK_VER_MERK > merkle.txt
	cd ..
	docker-compose stop 
fi

echo "Done."
